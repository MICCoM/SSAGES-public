diff -ruN /gromacs-original/src/programs/CMakeLists.txt /gromacs-ssages/src/programs/CMakeLists.txt
--- /gromacs-original/src/programs/CMakeLists.txt	2016-07-13 08:56:04.000000000 -0400
+++ /gromacs-ssages/src/programs/CMakeLists.txt	2016-08-06 01:26:06.237904812 -0400
@@ -35,6 +35,12 @@
 file(GLOB MDRUN_SOURCES mdrun/*.c mdrun/*.cpp)
 # make an "object library" that we can re-use for multiple targets
 add_library(mdrun_objlib OBJECT ${MDRUN_SOURCES})
+add_library(mdrun STATIC $<TARGET_OBJECTS:mdrun_objlib>)
+install(TARGETS mdrun
+        EXPORT mdrun
+        LIBRARY DESTINATION ${LIB_INSTALL_DIR}
+        ARCHIVE DESTINATION ${LIB_INSTALL_DIR}
+        COMPONENT libraries)
 
 if(GMX_FAHCORE)
     # The lack of a real source file here alongside the object library
diff -ruN /gromacs-original/src/programs/mdrun/md.cpp /gromacs-ssages/src/programs/mdrun/md.cpp
--- /gromacs-original/src/programs/mdrun/md.cpp	2016-07-13 08:56:04.000000000 -0400
+++ /gromacs-ssages/src/programs/mdrun/md.cpp	2016-08-07 16:56:00.657471253 -0400
@@ -111,6 +111,7 @@
 #include "gromacs/utility/fatalerror.h"
 #include "gromacs/utility/real.h"
 #include "gromacs/utility/smalloc.h"
+#include "GromacsHook.h"
 
 #include "deform.h"
 #include "membed.h"
@@ -647,6 +648,31 @@
         fprintf(fplog, "\n");
     }
 
+    // Setup SSAGES singleton and lambdas.
+    auto& ssages = SSAGES::GromacsHook::Instance();
+    ssages.SetGMXPush([&](){
+        // Begin SSAGES.
+        auto natoms = top_global->natoms;
+        int* ids = nullptr;
+        if(PAR(cr) && DOMAINDECOMP(cr))
+        {
+            natoms = cr->dd->nat_home;
+            ids = cr->dd->gatindex;
+        }
+        ssages.PushToGromacs(natoms, ids, mdatoms->massT, state->x, state->v, f);
+    });
+    ssages.SetGMXPull([&](){
+        // Begin SSAGES.
+        auto natoms = top_global->natoms;
+        int* ids = nullptr;
+        if(PAR(cr) && DOMAINDECOMP(cr))
+        {
+            natoms = cr->dd->nat_home;
+            ids = cr->dd->gatindex;
+        }
+        ssages.PullToSSAGES(step, natoms, ids, mdatoms->massT, state->x, state->v, f, enerd->term[F_TEMP], enerd->term[F_PRES], enerd->term[F_EPOT], BOLTZ);
+    });
+
     walltime_accounting_start(walltime_accounting);
     wallcycle_start(wcycle, ewcRUN);
     print_start(fplog, cr, walltime_accounting, "mdrun");
@@ -741,6 +767,9 @@
         gmx_fatal(FARGS, "The combination of mdrun -maxh and mdrun -multi is not supported. Please use the nsteps .mdp field.");
     }
 
+    ssages.SyncToSSAGES();
+    ssages.PreSimulationHook();
+
     /* and stop now if we should */
     bLastStep = (bRerunMD || (ir->nsteps >= 0 && step_rel > ir->nsteps) ||
                  ((multisim_nsteps >= 0) && (step_rel >= multisim_nsteps )));
@@ -1086,6 +1115,9 @@
                      state->lambda, graph,
                      fr, vsite, mu_tot, t, mdoutf_get_fp_field(outf), ed, bBornRadii,
                      (bNS ? GMX_FORCE_NS : 0) | force_flags);
+
+            ssages.SyncToSSAGES();
+            ssages.PostIntegrationHook();
         }
 
         if (bVV && !bStartingFromCpt && !bRerunMD)
@@ -1787,10 +1819,14 @@
         /* If bIMD is TRUE, the master updates the IMD energy record and sends positions to VMD client */
         IMD_prep_energies_send_positions(ir->bIMD && MASTER(cr), bIMDstep, ir->imd, enerd, step, bCalcEner, wcycle);
 
+        ssages.PostStepHook();
     }
     /* End of main MD loop */
     debug_gmx();
 
+    ssages.SyncToSSAGES();
+    ssages.PostSimulationHook();
+
     /* Closing TNG files can include compressing data. Therefore it is good to do that
      * before stopping the time measurements. */
     mdoutf_tng_close(outf);

